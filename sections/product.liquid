<!-- CART STYLES -->
{{ 'product.css' | asset_url | stylesheet_tag }}

<!-- SCRIPT -->
<script src="{{ 'mobile-carousel.js' | asset_url }}" defer></script>
<script src="{{ 'quantity-input.js' | asset_url }}" type="module"></script>

<!-- VARIABLES -->
{% assign product_item = product.selected_or_first_available_variant %}
{% assign cart_count_for_variant = cart | item_count_for_variant: product_item.id %}
{% assign max_quantity = product_item.inventory_quantity | minus: cart_count_for_variant %}

<!-- SECTION PRODUCT ITEM -->
<div class="section__product">
  <div class="container grid grid-2-col">
    <div class="product-gallery__product">
      {% for media in product.media %}
        <img
          class="product-img__product"
          src="{{ media | image_url }}"
          alt="{{ media.alt }}"
          width="auto"
          height="auto"
        >
      {% endfor %}
    </div>
    <div class="product-gallery__carousel">
      <div class="product-carousel-list">
        {% for media in product.media %}
          <img
            class="product-carousel-img"
            src="{{ media | image_url }}"
            alt="{{ media.alt }}"
            width="auto"
            height="auto"
          >
        {% endfor %}
      </div>
      <div class="product-carousel-btns">
        <button
          class="product-carousel-btn"
          name="left"
        >
          {% render 'icon-left-chevron', size: '2rem' %}
        </button>
        <div class="product-carousel-indicators"></div>
        <button
          class="product-carousel-btn"
          name="right"
        >
          {% render 'icon-right-chevron', size: '2rem' %}
        </button>
      </div>
    </div>
    <div class="product-description__product">
      <h1 class="heading-product-item">{{ product.title }}</h1>
      <div class="product-price-container__product">
        {% if product_item.price < product_item.compare_at_price %}
          <p class="product-price__product--sale">{{ product_item.compare_at_price | money }}</p>
          <p class="product-price__product">{{ product_item.price | money }}</p>
        {% else %}
          <p class="product-price__product">{{ product_item.price | money }}</p>
        {% endif %}
      </div>

      <!-- SIZE SELECTOR -->
      <cart-form>
        {% form 'product', product, id: 'form-product', class: 'form__product' %}
          {% unless product.has_only_default_variant %}
            <variant-selector
              class="variant-selector"
              data-url="{{ product.url }}"
              data-section="{{ section.id }}"
            >
              <h3 class="label">{{ product.options }}</h3>
              <!-- RADIO GROUP -->
              <div class="variant-container">
                {% for variant in product.variants %}
                  <input
                    class="input_radio"
                    type="radio"
                    name="option[Size]"
                    id="{{ variant.title }}"
                    value="{{ variant.id }}"
                    {% if product_item.id == variant.id %}
                      checked
                    {% endif %}
                  >
                  <label class="input-label_radio" for="{{ variant.title  }}">{{ variant.title }}</label>
                {% endfor %}
              </div>
            </variant-selector>
          {% else %}
            <variant-selector class="variant-selector" style="display: none;">
              <h3 class="label">Size</h3>
              <div>
                <input
                  class="input_radio"
                  type="radio"
                  name="option[Size]"
                  id="Free size"
                  value="{{ product_item.id }}"
                  checked
                >
                <label class="input-label_radio input-label_radio--free" for="Free size">Free size</label>
              </div>
            </variant-selector>
          {% endunless %}

          <div class="cta-container__product">
            <!-- INPUT QUANTITY -->
            <quantity-input
              class="quantity-input"
              data-name="{{ product.title }}"
              data-available="{{ product_item.available }}"
              data-size="{{ product_item.title }}"
            >
              <button name="decrement">
                {% render 'icon-minus' %}
              </button>
              <input
                class="input_number"
                type="number"
                name="quantity"
                value="1"
                min="1"
                max="{{ max_quantity }}"
                readonly
              >
              <button name="increment">
                {% render 'icon-plus' %}
              </button>
            </quantity-input>

            <!-- ADD TO CART BUTTON -->
            {% if product_item.inventory_quantity == 0 %}
              <button
                class="btn btn_main"
                type="submit"
                disabled
              >
                Sold out
              </button>
            {% else %}
              <button
                class="btn btn_outline"
                type="submit"
                name="add"
              >
                Add to cart
              </button>
            {% endif %}
          </div>
        {% endform %}
      </cart-form>

      <div class="product-content__product">{{ product.content }}</div>
      <div class="product-accordion">
        {% render 'accordion', product_tag: product.tags %}
      </div>
    </div>
  </div>
</div>

<!-- SCRIPTS -->
<script type="application/ld+json">
  {{ product | structured_data }}
</script>
<script>
  class CartForm extends HTMLElement {
    constructor() {
      super();

      this.addEventListener('submit', this.onFormSubmit);
    }

    onFormSubmit(e) {
      e.preventDefault();

      this.getFormData();
      this.removeErrorMsg();
      this.fetchCartAdd();
    }

    getFormData() {
      const id = this.querySelector('variant-selector').getVariantId();
      const quantity = this.querySelector('quantity-input').inputQuantity.value;

      this.formData = {
        items: [
          {
            id,
            quantity,
          },
        ],
      };

      return this.formData;
    }

    removeErrorMsg() {
      this.querySelector('.error-message')?.remove();
    }

    async fetchCartAdd() {
      try {
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(this.formData),
        });
        const data = await res.json();

        if (res.status === 422) throw new Error(data.description);

        window.location.href = '/cart';
      } catch (err) {
        this.renderErrorMsg(err);
      }
    }

    renderErrorMsg(err) {
      const btnContainer = this.querySelector('.cta-container__product');
      const html = `
        <div class="error-message">
          {% render 'icon-error-alert' %} ${err.message}
        </div>
      `;

      btnContainer.insertAdjacentHTML('beforeend', html);
    }
  }

  customElements.define('cart-form', CartForm);

  class VariantSelector extends HTMLElement {
    constructor() {
      super();

      this.optionSizes = [...this.querySelectorAll('[name="option[Size]"]')];
      this.addEventListener('change', this.onVariantChange);
    }

    onVariantChange(e) {
      this.getVariantId();
      this.getRequestUrl();
      this.setUrl();
      this.fetchHtml();
    }

    getVariantId() {
      this.variantId = this.optionSizes
        .map((input) => (input.checked ? input.value : null))
        .filter((value) => value !== null)
        .join();

      return this.variantId;
    }

    getRequestUrl() {
      if (!this.variantId) return;

      this.requestUrl = `${this.dataset.url}?variant=${this.variantId}`;

      return this.requestUrl;
    }

    setUrl() {
      if (!this.requestUrl) return;

      window.history.replaceState({}, '', `${this.requestUrl}`);
    }

    async fetchHtml() {
      if (!this.requestUrl) return;

      const res = await fetch(`${this.requestUrl}&section_id=${this.dataset.section}`);
      const data = await res.text();
      const html = new DOMParser().parseFromString(data, 'text/html');

      this.renderHtml(html);
    }

    renderHtml(resHtml) {
      const newHtml = this.formQuerySelector(resHtml);
      const oldHtml = this.formQuerySelector(document);

      if (oldHtml.isEqualNode(newHtml)) return;

      oldHtml.innerHTML = newHtml.innerHTML;
    }

    formQuerySelector(el) {
      return el.querySelector('form[action="/cart/add"]');
    }
  }

  customElements.define('variant-selector', VariantSelector);
</script>
